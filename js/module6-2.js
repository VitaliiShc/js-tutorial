// // ❗️❗️❗️ Події
// // Подія - це сігнал від браузера, що на сторінці щось вдбулося. Використовуються для реагування на дії колристувача.
// // Для того, щоб реагувати на дії колристувача на елементі до нього додаеться слухач - метод addEventListener()
// // ❗️ Метод addEventListener(event, handler, options), де:
// // event - подія, на яку потрібно реагувати, записується у вигляді рядка,
// // handler - колбек-функція, яка викликається під час настання подіі,
// // options додатковій (необов'язковий) об'єкт параметрів з озширеними налаштуваннями.

// // Для елемента можу бути додано кілька, в тому чіслі, однакових слухачів з різнима колбекамі - в такому випадку вони буцдуть виконуватися в порядку іх рєестрації в коді.

// // ❗️ Метод removeEventListener() - видяляє слухача з елемента, та повінен мати в собі тіж аргументи, що і сам слухач.

// // ❗️❗️❗️ this
// // ❗️ якщо колбеком буде функція з this, то цей this буде посилатися на той DOM елемент, на якому висить слухач.

// // ❗️❗️❗️ Об'єкт події
// // Подія - це об'єкт, який містить інформацію про її деталі та автоматично передається першим аргументом в обробник події.
// // Важливі властивості об'єкта події:
// // event.type - тип події.
// // event.currentTarget - елемент, на якому виконується обробник події.

const clickBtn = document.querySelector('.js-btn');
clickBtn.addEventListener('click', onBtnClickLogger);
function onBtnClickLogger(event) {
  console.log('event: ', event);
  console.log('event type: ', event.type);
  console.log('currentTarget: ', event.currentTarget);
}

// // ❗️❗️❗️ Дії за замовчуванням
// // Щоб вимкнути дії, яки браузем виконує по дефолту (клик по посиланню, відкриття вікна завантаженя, тощо), в колбек-функції потрібно вказати метод event.preventDefault().

// // ❗️❗️❗️ Події клавіатури
// // Існують дві події клавіатури - 'keydown' (натискання на клавышу) і 'keyup' (выдпускання клавыши). Базовий клас - KeyboardEvent.
// // ❗️ Властивості 'key' і 'code'
// // key - повертає сімвол натиснутої клавіши в тої раскладці, що на поточний час увімкнена.
// // code - повертає код клавіши

// document.addEventListener('keydown', event => {
//   console.log(event);
//   console.log('key: ', event.key);
//   console.log('code: ', event.code);
// });

// // ❗️ Клавіші - модифікатори.
// // Для обробки натискань клавосполучень використовуються властивості 'trlKey', 'altKey', 'shiftKey' і 'metaKey', які зберігають булеве значення, чи була натиснута клавіша-модіфікатор.

// document.addEventListener('keydown', event => {
//   event.preventDefault();
//   if ((event.ctrlKey || event.shiftKey) && event.code === 'KeyS') {
//     console.log('"Ctrl + s" or "Shift + s" combo');
//   }
// });

// // ❗️❗️❗️ Події елементів форм
// // ❗️ Подія submit. Виконується при натисканні кнопкі Submit або клавиши Enter. Подію можна використовувати для валідаціі полів форми або ще чогось. Але спочатку потрібно вимкнути дію по дефолту - перезавантаження сторінки.
// // ❗️ Подія change. Виконується після зміни елемента форми. Для тектових полів та текс-арєа - виконується після втрати фокусу. Для селекторів, чекбоксів або радіо-баттонов виконується одразу при виборі значення
// // ❗️ ПодіяПодія input. Відбувається тількі на текстових полях та текст-арєа та створюється одразу при зміні значення.
// // ❗️ Подія focus і blur. Відбувається при отриманні фокусу (focus), або втраті (blur). Можно активувати або скасувати фокус программно, викликавши в коді для елемента методи ocus() і blur(). Фокус може бути тільки на одному елементі сторінки за одиницю часу, і поточний елемент, на якому знаходиться фокус, доступний як document.activeElement.
